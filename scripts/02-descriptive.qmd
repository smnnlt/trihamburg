---
title: "Descriptive Analysis: Power Profile and Distribution"
format: 
  html:
    self-contained: true
    toc: true
output-file: "./output/02-descriptive.html"
---

Script #02 for the project: "Relationship between tactical decisions and power demands during cycling in a male elite sprint triathlon world championship"

### Setup

```{r}
#| warning: false

library(purrr)   # Functional programming
library(ggplot2) # Visualization
library(dplyr)   # Data wrangling
```

### Load data

```{r}
d <- read.csv("../data/temp/cleaned-combined.csv")
d$athlete <- as.factor(d$athlete)
```

### Power Profile

#### Calculation

```{r}
maxeffort <- function(t, x) {
  # create a moving average over length t
  series <- stats::filter(x, rep(1 / t, t), sides = 2) 
  # find maximum
  m <- max(as.vector(series), na.rm = TRUE)
  data.frame(
    time = t,
    power = m
  )
}

maxeffort_all <- function(athlete, range = 1:1210, data = d) {
  powerdata <- data$power[data$athlete == athlete]
  df <- purrr::map_dfr(range, maxeffort, x = powerdata)
  df$athlete <- athlete
  df
}

pp <- purrr::map_dfr(levels(d$athlete), maxeffort_all)

```

#### Visualization

```{r}
ggplot(pp, aes(x = time, y = power, colour = athlete)) +
  geom_line() +
  scale_x_log10(
    breaks = c(5, 10, 30, 60, 120, 300, 600, 1200),
    minor_breaks = FALSE
  ) + 
  scale_y_continuous(
    breaks = seq(300, 1100, 200),
    limits = c(290, 1110)
  ) +
  theme_minimal()
```

### Power Distribution

```{r}
ggplot(d, aes(x = power, colour = athlete)) +
  geom_density()
```

### Descriptive Data

#### Create descriptive functions

```{r}
# function for calculating mean with values of zero power excluded
mean_nonzero <- function(data, na.rm = TRUE) {
  mean(data[data != 0], na.rm = na.rm)
}

# function for calculating time above a certain value
t_over <- function(data, value, na.rm = TRUE) {
  sum(data > value, na.rm = na.rm)
}

count_peaks <- function(data, value) {
  w <- which(data > value) # get indices of high power outputs
  
  # count number of independent peaks
  i <-  1
  count <- 0
  while (i <= length(w)) {
    if (i == 1) { # first peak
      count <- 1
    } else {
      if (w[i] != (w[i-1]+1)) { # new peak
        count <- count + 1
      }
    }
  i <- i + 1
  }
  count
}

```
#### Create table

```{r}
# summarise descriptive power data for each athlete
d |>
  dplyr::group_by(athlete) |>
  dplyr::summarise(
    mean = mean(power, na.rm = TRUE),
    mean_non0 = mean_nonzero(power, na.rm = TRUE),
    sd = sd(power, na.rm = TRUE),
    max = max(power, na.rm = TRUE),
    t500 = t_over(power, 500, na.rm = TRUE),
    t700 = t_over(power, 700, na.rm = TRUE),
    n500 = count_peaks(power, 500),
    n700 = count_peaks(power, 700)
  )
```

